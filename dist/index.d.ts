import 'isomorphic-fetch';
import { KeyRequest } from './apikey';
import { JwtTokenRequest, ForgottenUsernameRequest, ForgottenPasswordRequest, PasswordResetRequest } from './authentication';
import { CreateCustomerRequest, UpdateCustomerRequest, CustomerAddressRequest, CustomerPaymentRequest } from './customers';
import { RecurrenceRequest, PlanRequest, SubscriptionRequest } from './recurring';
import { TransactionRequest, TransactionQueryRequest, TransactionCaptureRequest, TransactionRefundRequest } from './transactions';
import { ChangePasswordRequest, CreateUserRequest, UpdateUserRequest } from './users';
export interface Constructor {
    apiKey: string;
    environment?: Environment;
}
declare type Environment = 'production' | 'sandbox' | 'development';
export default class Fluidpay {
    private apiKey;
    private environment;
    constructor(info: Constructor);
    createKey(reqBody: KeyRequest): Promise<Response>;
    getKeys(): Promise<Response>;
    deleteKey(apiKey: string): Promise<Response>;
    obtainJWT(reqBody: JwtTokenRequest): Promise<Response>;
    forgottenUsername(reqBody: ForgottenUsernameRequest): Promise<Response>;
    forgottenPassword(reqBody: ForgottenPasswordRequest): Promise<Response>;
    passwordReset(reqBody: PasswordResetRequest): Promise<Response>;
    tokenLogout(): Promise<Response>;
    createCustomer(reqBody: CreateCustomerRequest): Promise<Response>;
    getCustomer(customerId: string): Promise<Response>;
    updateCustomer(reqBody: UpdateCustomerRequest, customerId: string): Promise<Response>;
    deleteCustomer(customerId: string): Promise<Response>;
    createCustomerAddress(reqBody: CustomerAddressRequest, customerId: string): Promise<Response>;
    getCustomerAddress(customerId: string, addressTokenId: string): Promise<Response>;
    getCustomerAddresses(customerId: string): Promise<Response>;
    updateCustomerAddress(reqBody: CustomerAddressRequest, customerId: string, addressTokenId: string): Promise<Response>;
    deleteCustomerAddress(customerId: string, addressTokenId: string): Promise<Response>;
    createCustomerPayment(reqBody: CustomerPaymentRequest, customerId: string, paymentType: string): Promise<Response>;
    getCustomerPayment(customerId: string, paymentType: string, paymentTokenId: string): Promise<Response>;
    getCustomerPayments(customerId: string, paymentType: string): Promise<Response>;
    updateCustomerPayment(reqBody: CustomerPaymentRequest, customerId: string, paymentType: string, paymentTokenId: string): Promise<Response>;
    deleteCustomerPayment(customerId: string, paymentType: string, paymentTokenId: string): Promise<Response>;
    createAddOn(reqBody: RecurrenceRequest): Promise<Response>;
    getAddOn(addOnId: string): Promise<Response>;
    getAddOns(): Promise<Response>;
    updateAddOn(reqBody: RecurrenceRequest, addOnId: string): Promise<Response>;
    deleteAddOn(addOnId: string): Promise<Response>;
    createDiscount(reqBody: RecurrenceRequest): Promise<Response>;
    getDiscount(discountId: string): Promise<Response>;
    getDiscounts(): Promise<Response>;
    updateDiscount(reqBody: RecurrenceRequest, discountId: string): Promise<Response>;
    deleteDiscount(discountId: string): Promise<Response>;
    createPlan(reqBody: PlanRequest): Promise<Response>;
    getPlan(planId: string): Promise<Response>;
    getPlans(): Promise<Response>;
    updatePlan(reqBody: PlanRequest, planId: string): Promise<Response>;
    deletePlan(planId: string): Promise<Response>;
    createSubscription(reqBody: SubscriptionRequest): Promise<Response>;
    getSubscription(subscriptionId: string): Promise<Response>;
    updateSubscription(reqBody: SubscriptionRequest, subscriptionId: string): Promise<Response>;
    deleteSubscription(subscriptionId: string): Promise<Response>;
    getTerminals(): Promise<Response>;
    doTransaction(reqBody: TransactionRequest): Promise<Response>;
    getTransactionStatus(transactionId: string): Promise<Response>;
    queryTransaction(reqBody: TransactionQueryRequest): Promise<Response>;
    captureTransaction(reqBody: TransactionCaptureRequest, transactionId: string): Promise<Response>;
    voidTransaction(transactionId: string): Promise<Response>;
    refundTransacttion(reqBody: TransactionRefundRequest, transactionId: string): Promise<Response>;
    changePassword(reqBody: ChangePasswordRequest): Promise<Response>;
    createUser(reqBody: CreateUserRequest): Promise<Response>;
    getCurrentUser(): Promise<Response>;
    getUser(userId: string): Promise<Response>;
    getUsers(): Promise<Response>;
    updateUser(reqBody: UpdateUserRequest, userId: string): Promise<Response>;
    deleteUser(userId: string): Promise<Response>;
}
export {};
